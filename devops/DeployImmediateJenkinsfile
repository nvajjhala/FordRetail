def parallelStages = [:]
def orgsToDeploy = ['devmerge']
pipeline {
    agent any
    environment {
        SFDX_HOME = tool 'sfdx-cli'
        SFDX_DISABLE_DNS_CHECK=true

        devmerge_CREDENTIALS = credentials('ford_sf_devmerge.auth')
        qacredit_CREDENTIALS = credentials('ford_sf_qacredit.auth')
        sit_CREDENTIALS = credentials('ford_sf_sit.auth')
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Deploy orgs') {
            steps {
                script {
                    orgsToDeploy.each { org ->
                            echo "parallel deploy:${org}"
                        parallelStages[org] = {
                            stage("Authorize an $org org") {

                                sh "eval ${SFDX_HOME}/sfdx auth:sfdxurl:store -f \$${org}_CREDENTIALS -a ford_${org}"

                            }
                            stage("Deploy metadata in $org org") {
                                try {
                                    sh "set -o pipefail;${SFDX_HOME}/sfdx force:source:deploy -p force-app/main/default -u ford_${org} 2>&1 | tee ford_${org}.log "
                                }
                                catch (exc) {

                                    echo "deploy $org failed"
                                    if (env.CHANGE_ID) {
                                        def sfdxErrorLog = readFile "./ford_${org}.log"
                                        def commentStr ="```\n$sfdxErrorLog\n```" 
                                        commentStr = "### $org deploy failed\n" + commentStr
                                        pullRequest.comment(commentStr)
                                    }
                                    else {
                                        /*
                                        emailext body: 'deploy failed',
                                        subject: "$JOB_BASE_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS",
                                        to: 'saddanki@salesforce.com nvajjhala@salesforce.com'
                                        */
                                    }
                                    throw exc

                                }

                            }

                        }
                    }
                    parallel parallelStages

                }
            }
        }


    }
    post {
        always {
            sh 'printenv'
        }
    }
}

